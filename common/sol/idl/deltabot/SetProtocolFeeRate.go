// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetProtocolFeeRate is the `setProtocolFeeRate` instruction.
type SetProtocolFeeRate struct {
	NewProtocolFeeRate *uint32
	NewTakerFeeRate    *uint32

	// [0] = [WRITE] gridBotState
	//
	// [1] = [WRITE, SIGNER] user
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetProtocolFeeRateInstructionBuilder creates a new `SetProtocolFeeRate` instruction builder.
func NewSetProtocolFeeRateInstructionBuilder() *SetProtocolFeeRate {
	nd := &SetProtocolFeeRate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetNewProtocolFeeRate sets the "newProtocolFeeRate" parameter.
func (inst *SetProtocolFeeRate) SetNewProtocolFeeRate(newProtocolFeeRate uint32) *SetProtocolFeeRate {
	inst.NewProtocolFeeRate = &newProtocolFeeRate
	return inst
}

// SetNewTakerFeeRate sets the "newTakerFeeRate" parameter.
func (inst *SetProtocolFeeRate) SetNewTakerFeeRate(newTakerFeeRate uint32) *SetProtocolFeeRate {
	inst.NewTakerFeeRate = &newTakerFeeRate
	return inst
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *SetProtocolFeeRate) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *SetProtocolFeeRate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(gridBotState).WRITE()
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *SetProtocolFeeRate) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAccount sets the "user" account.
func (inst *SetProtocolFeeRate) SetUserAccount(user ag_solanago.PublicKey) *SetProtocolFeeRate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *SetProtocolFeeRate) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SetProtocolFeeRate) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SetProtocolFeeRate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SetProtocolFeeRate) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst SetProtocolFeeRate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetProtocolFeeRate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetProtocolFeeRate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetProtocolFeeRate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewProtocolFeeRate == nil {
			return errors.New("NewProtocolFeeRate parameter is not set")
		}
		if inst.NewTakerFeeRate == nil {
			return errors.New("NewTakerFeeRate parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *SetProtocolFeeRate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetProtocolFeeRate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("NewProtocolFeeRate", *inst.NewProtocolFeeRate))
						paramsBranch.Child(ag_format.Param("   NewTakerFeeRate", *inst.NewTakerFeeRate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" gridBotState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         user", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetProtocolFeeRate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewProtocolFeeRate` param:
	err = encoder.Encode(obj.NewProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `NewTakerFeeRate` param:
	err = encoder.Encode(obj.NewTakerFeeRate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetProtocolFeeRate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewProtocolFeeRate`:
	err = decoder.Decode(&obj.NewProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `NewTakerFeeRate`:
	err = decoder.Decode(&obj.NewTakerFeeRate)
	if err != nil {
		return err
	}
	return nil
}

// NewSetProtocolFeeRateInstruction declares a new SetProtocolFeeRate instruction with the provided parameters and accounts.
func NewSetProtocolFeeRateInstruction(
	// Parameters:
	newProtocolFeeRate uint32,
	newTakerFeeRate uint32,
	// Accounts:
	gridBotState ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *SetProtocolFeeRate {
	return NewSetProtocolFeeRateInstructionBuilder().
		SetNewProtocolFeeRate(newProtocolFeeRate).
		SetNewTakerFeeRate(newTakerFeeRate).
		SetGridBotStateAccount(gridBotState).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
