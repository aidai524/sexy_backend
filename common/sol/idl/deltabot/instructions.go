// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Deltabot"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_CreateBotAccount = ag_binary.TypeID([8]byte{121, 115, 224, 109, 73, 52, 120, 32})

	Instruction_CreateBot = ag_binary.TypeID([8]byte{117, 0, 252, 57, 65, 111, 47, 38})

	Instruction_CloseBot = ag_binary.TypeID([8]byte{185, 156, 75, 219, 107, 51, 35, 209})

	Instruction_CreateOrders = ag_binary.TypeID([8]byte{32, 134, 91, 170, 118, 79, 248, 185})

	Instruction_TakeOrders = ag_binary.TypeID([8]byte{51, 29, 114, 56, 149, 97, 235, 162})

	Instruction_Claim = ag_binary.TypeID([8]byte{62, 198, 214, 193, 213, 159, 108, 210})

	Instruction_SetOwner = ag_binary.TypeID([8]byte{72, 202, 120, 52, 77, 128, 96, 197})

	Instruction_RegisterGlobalToken = ag_binary.TypeID([8]byte{61, 184, 236, 94, 43, 6, 172, 246})

	Instruction_RegisterProtocolToken = ag_binary.TypeID([8]byte{51, 116, 55, 231, 169, 132, 68, 244})

	Instruction_RegisterDepositLimit = ag_binary.TypeID([8]byte{102, 69, 148, 224, 4, 148, 142, 96})

	Instruction_RegisterPair = ag_binary.TypeID([8]byte{178, 72, 223, 54, 235, 196, 1, 25})

	Instruction_SetMinDeposit = ag_binary.TypeID([8]byte{15, 182, 74, 248, 251, 148, 186, 171})

	Instruction_SetProtocolFeeRate = ag_binary.TypeID([8]byte{95, 7, 4, 50, 154, 79, 156, 131})

	Instruction_SetReferralFeeRate = ag_binary.TypeID([8]byte{113, 10, 15, 190, 247, 184, 59, 50})

	Instruction_WithdrawProtocolFee = ag_binary.TypeID([8]byte{158, 201, 158, 189, 33, 93, 162, 103})

	Instruction_Start = ag_binary.TypeID([8]byte{62, 15, 117, 236, 47, 1, 89, 139})

	Instruction_Pause = ag_binary.TypeID([8]byte{211, 22, 221, 251, 74, 121, 193, 47})

	Instruction_Shutdown = ag_binary.TypeID([8]byte{146, 204, 241, 213, 86, 21, 253, 211})

	Instruction_SetMakerUser = ag_binary.TypeID([8]byte{158, 165, 199, 218, 123, 33, 150, 8})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_CreateBotAccount:
		return "CreateBotAccount"
	case Instruction_CreateBot:
		return "CreateBot"
	case Instruction_CloseBot:
		return "CloseBot"
	case Instruction_CreateOrders:
		return "CreateOrders"
	case Instruction_TakeOrders:
		return "TakeOrders"
	case Instruction_Claim:
		return "Claim"
	case Instruction_SetOwner:
		return "SetOwner"
	case Instruction_RegisterGlobalToken:
		return "RegisterGlobalToken"
	case Instruction_RegisterProtocolToken:
		return "RegisterProtocolToken"
	case Instruction_RegisterDepositLimit:
		return "RegisterDepositLimit"
	case Instruction_RegisterPair:
		return "RegisterPair"
	case Instruction_SetMinDeposit:
		return "SetMinDeposit"
	case Instruction_SetProtocolFeeRate:
		return "SetProtocolFeeRate"
	case Instruction_SetReferralFeeRate:
		return "SetReferralFeeRate"
	case Instruction_WithdrawProtocolFee:
		return "WithdrawProtocolFee"
	case Instruction_Start:
		return "Start"
	case Instruction_Pause:
		return "Pause"
	case Instruction_Shutdown:
		return "Shutdown"
	case Instruction_SetMakerUser:
		return "SetMakerUser"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"create_bot_account", (*CreateBotAccount)(nil),
		},
		{
			"create_bot", (*CreateBot)(nil),
		},
		{
			"close_bot", (*CloseBot)(nil),
		},
		{
			"create_orders", (*CreateOrders)(nil),
		},
		{
			"take_orders", (*TakeOrders)(nil),
		},
		{
			"claim", (*Claim)(nil),
		},
		{
			"set_owner", (*SetOwner)(nil),
		},
		{
			"register_global_token", (*RegisterGlobalToken)(nil),
		},
		{
			"register_protocol_token", (*RegisterProtocolToken)(nil),
		},
		{
			"register_deposit_limit", (*RegisterDepositLimit)(nil),
		},
		{
			"register_pair", (*RegisterPair)(nil),
		},
		{
			"set_min_deposit", (*SetMinDeposit)(nil),
		},
		{
			"set_protocol_fee_rate", (*SetProtocolFeeRate)(nil),
		},
		{
			"set_referral_fee_rate", (*SetReferralFeeRate)(nil),
		},
		{
			"withdraw_protocol_fee", (*WithdrawProtocolFee)(nil),
		},
		{
			"start", (*Start)(nil),
		},
		{
			"pause", (*Pause)(nil),
		},
		{
			"shutdown", (*Shutdown)(nil),
		},
		{
			"set_maker_user", (*SetMakerUser)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
