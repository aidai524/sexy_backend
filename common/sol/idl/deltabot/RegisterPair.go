// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RegisterPair is the `registerPair` instruction.
type RegisterPair struct {
	BaseMinDeposit  *uint64
	QuoteMinDeposit *uint64

	// [0] = [] gridBotState
	//
	// [1] = [WRITE] pair
	//
	// [2] = [] baseMint
	//
	// [3] = [] quoteMint
	//
	// [4] = [WRITE] depositLimitBase
	//
	// [5] = [WRITE] depositLimitQuote
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] associatedTokenProgram
	//
	// [8] = [WRITE, SIGNER] user
	//
	// [9] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRegisterPairInstructionBuilder creates a new `RegisterPair` instruction builder.
func NewRegisterPairInstructionBuilder() *RegisterPair {
	nd := &RegisterPair{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetBaseMinDeposit sets the "baseMinDeposit" parameter.
func (inst *RegisterPair) SetBaseMinDeposit(baseMinDeposit uint64) *RegisterPair {
	inst.BaseMinDeposit = &baseMinDeposit
	return inst
}

// SetQuoteMinDeposit sets the "quoteMinDeposit" parameter.
func (inst *RegisterPair) SetQuoteMinDeposit(quoteMinDeposit uint64) *RegisterPair {
	inst.QuoteMinDeposit = &quoteMinDeposit
	return inst
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *RegisterPair) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(gridBotState)
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *RegisterPair) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPairAccount sets the "pair" account.
func (inst *RegisterPair) SetPairAccount(pair ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *RegisterPair) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBaseMintAccount sets the "baseMint" account.
func (inst *RegisterPair) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "baseMint" account.
func (inst *RegisterPair) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQuoteMintAccount sets the "quoteMint" account.
func (inst *RegisterPair) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quoteMint" account.
func (inst *RegisterPair) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDepositLimitBaseAccount sets the "depositLimitBase" account.
func (inst *RegisterPair) SetDepositLimitBaseAccount(depositLimitBase ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(depositLimitBase).WRITE()
	return inst
}

// GetDepositLimitBaseAccount gets the "depositLimitBase" account.
func (inst *RegisterPair) GetDepositLimitBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetDepositLimitQuoteAccount sets the "depositLimitQuote" account.
func (inst *RegisterPair) SetDepositLimitQuoteAccount(depositLimitQuote ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(depositLimitQuote).WRITE()
	return inst
}

// GetDepositLimitQuoteAccount gets the "depositLimitQuote" account.
func (inst *RegisterPair) GetDepositLimitQuoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RegisterPair) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RegisterPair) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *RegisterPair) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *RegisterPair) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetUserAccount sets the "user" account.
func (inst *RegisterPair) SetUserAccount(user ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *RegisterPair) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RegisterPair) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RegisterPair {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RegisterPair) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst RegisterPair) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RegisterPair,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RegisterPair) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RegisterPair) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BaseMinDeposit == nil {
			return errors.New("BaseMinDeposit parameter is not set")
		}
		if inst.QuoteMinDeposit == nil {
			return errors.New("QuoteMinDeposit parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DepositLimitBase is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.DepositLimitQuote is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *RegisterPair) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RegisterPair")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" BaseMinDeposit", *inst.BaseMinDeposit))
						paramsBranch.Child(ag_format.Param("QuoteMinDeposit", *inst.QuoteMinDeposit))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          gridBotState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                  pair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              baseMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             quoteMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      depositLimitBase", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     depositLimitQuote", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj RegisterPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseMinDeposit` param:
	err = encoder.Encode(obj.BaseMinDeposit)
	if err != nil {
		return err
	}
	// Serialize `QuoteMinDeposit` param:
	err = encoder.Encode(obj.QuoteMinDeposit)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RegisterPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseMinDeposit`:
	err = decoder.Decode(&obj.BaseMinDeposit)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMinDeposit`:
	err = decoder.Decode(&obj.QuoteMinDeposit)
	if err != nil {
		return err
	}
	return nil
}

// NewRegisterPairInstruction declares a new RegisterPair instruction with the provided parameters and accounts.
func NewRegisterPairInstruction(
	// Parameters:
	baseMinDeposit uint64,
	quoteMinDeposit uint64,
	// Accounts:
	gridBotState ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	depositLimitBase ag_solanago.PublicKey,
	depositLimitQuote ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *RegisterPair {
	return NewRegisterPairInstructionBuilder().
		SetBaseMinDeposit(baseMinDeposit).
		SetQuoteMinDeposit(quoteMinDeposit).
		SetGridBotStateAccount(gridBotState).
		SetPairAccount(pair).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetDepositLimitBaseAccount(depositLimitBase).
		SetDepositLimitQuoteAccount(depositLimitQuote).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
