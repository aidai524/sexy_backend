// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Claim is the `claim` instruction.
type Claim struct {
	ClaimParam *ClaimParam

	// [0] = [] gridBotState
	//
	// [1] = [] baseMint
	//
	// [2] = [] quoteMint
	//
	// [3] = [WRITE] gridBot
	//
	// [4] = [] pair
	//
	// [5] = [] globalBalanceBaseUser
	//
	// [6] = [WRITE] globalBalanceBase
	//
	// [7] = [] globalBalanceQuoteUser
	//
	// [8] = [WRITE] globalBalanceQuote
	//
	// [9] = [WRITE] userBaseTokenAccount
	//
	// [10] = [WRITE] userQuoteTokenAccount
	//
	// [11] = [] tokenProgram
	//
	// [12] = [] associatedTokenProgram
	//
	// [13] = [WRITE, SIGNER] user
	//
	// [14] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimInstructionBuilder creates a new `Claim` instruction builder.
func NewClaimInstructionBuilder() *Claim {
	nd := &Claim{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetClaimParam sets the "claimParam" parameter.
func (inst *Claim) SetClaimParam(claimParam ClaimParam) *Claim {
	inst.ClaimParam = &claimParam
	return inst
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *Claim) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(gridBotState)
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *Claim) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBaseMintAccount sets the "baseMint" account.
func (inst *Claim) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "baseMint" account.
func (inst *Claim) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQuoteMintAccount sets the "quoteMint" account.
func (inst *Claim) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quoteMint" account.
func (inst *Claim) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGridBotAccount sets the "gridBot" account.
func (inst *Claim) SetGridBotAccount(gridBot ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(gridBot).WRITE()
	return inst
}

// GetGridBotAccount gets the "gridBot" account.
func (inst *Claim) GetGridBotAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPairAccount sets the "pair" account.
func (inst *Claim) SetPairAccount(pair ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(pair)
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *Claim) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetGlobalBalanceBaseUserAccount sets the "globalBalanceBaseUser" account.
func (inst *Claim) SetGlobalBalanceBaseUserAccount(globalBalanceBaseUser ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(globalBalanceBaseUser)
	return inst
}

// GetGlobalBalanceBaseUserAccount gets the "globalBalanceBaseUser" account.
func (inst *Claim) GetGlobalBalanceBaseUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetGlobalBalanceBaseAccount sets the "globalBalanceBase" account.
func (inst *Claim) SetGlobalBalanceBaseAccount(globalBalanceBase ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(globalBalanceBase).WRITE()
	return inst
}

// GetGlobalBalanceBaseAccount gets the "globalBalanceBase" account.
func (inst *Claim) GetGlobalBalanceBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetGlobalBalanceQuoteUserAccount sets the "globalBalanceQuoteUser" account.
func (inst *Claim) SetGlobalBalanceQuoteUserAccount(globalBalanceQuoteUser ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(globalBalanceQuoteUser)
	return inst
}

// GetGlobalBalanceQuoteUserAccount gets the "globalBalanceQuoteUser" account.
func (inst *Claim) GetGlobalBalanceQuoteUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetGlobalBalanceQuoteAccount sets the "globalBalanceQuote" account.
func (inst *Claim) SetGlobalBalanceQuoteAccount(globalBalanceQuote ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(globalBalanceQuote).WRITE()
	return inst
}

// GetGlobalBalanceQuoteAccount gets the "globalBalanceQuote" account.
func (inst *Claim) GetGlobalBalanceQuoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserBaseTokenAccountAccount sets the "userBaseTokenAccount" account.
func (inst *Claim) SetUserBaseTokenAccountAccount(userBaseTokenAccount ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userBaseTokenAccount).WRITE()
	return inst
}

// GetUserBaseTokenAccountAccount gets the "userBaseTokenAccount" account.
func (inst *Claim) GetUserBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUserQuoteTokenAccountAccount sets the "userQuoteTokenAccount" account.
func (inst *Claim) SetUserQuoteTokenAccountAccount(userQuoteTokenAccount ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(userQuoteTokenAccount).WRITE()
	return inst
}

// GetUserQuoteTokenAccountAccount gets the "userQuoteTokenAccount" account.
func (inst *Claim) GetUserQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Claim) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Claim) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *Claim) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *Claim) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetUserAccount sets the "user" account.
func (inst *Claim) SetUserAccount(user ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Claim) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Claim) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Claim) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst Claim) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Claim,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Claim) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Claim) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ClaimParam == nil {
			return errors.New("ClaimParam parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.GridBot is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.GlobalBalanceBaseUser is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.GlobalBalanceBase is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.GlobalBalanceQuoteUser is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.GlobalBalanceQuote is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.UserBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.UserQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Claim) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Claim")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ClaimParam", *inst.ClaimParam))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          gridBotState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              baseMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             quoteMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               gridBot", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                  pair", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" globalBalanceBaseUser", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     globalBalanceBase", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("globalBalanceQuoteUser", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    globalBalanceQuote", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         userBaseToken", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("        userQuoteToken", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj Claim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ClaimParam` param:
	err = encoder.Encode(obj.ClaimParam)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Claim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ClaimParam`:
	err = decoder.Decode(&obj.ClaimParam)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimInstruction declares a new Claim instruction with the provided parameters and accounts.
func NewClaimInstruction(
	// Parameters:
	claimParam ClaimParam,
	// Accounts:
	gridBotState ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	gridBot ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	globalBalanceBaseUser ag_solanago.PublicKey,
	globalBalanceBase ag_solanago.PublicKey,
	globalBalanceQuoteUser ag_solanago.PublicKey,
	globalBalanceQuote ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Claim {
	return NewClaimInstructionBuilder().
		SetClaimParam(claimParam).
		SetGridBotStateAccount(gridBotState).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetGridBotAccount(gridBot).
		SetPairAccount(pair).
		SetGlobalBalanceBaseUserAccount(globalBalanceBaseUser).
		SetGlobalBalanceBaseAccount(globalBalanceBase).
		SetGlobalBalanceQuoteUserAccount(globalBalanceQuoteUser).
		SetGlobalBalanceQuoteAccount(globalBalanceQuote).
		SetUserBaseTokenAccountAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccountAccount(userQuoteTokenAccount).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
