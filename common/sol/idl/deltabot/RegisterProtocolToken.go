// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RegisterProtocolToken is the `registerProtocolToken` instruction.
type RegisterProtocolToken struct {

	// [0] = [] gridBotState
	//
	// [1] = [] mint
	//
	// [2] = [WRITE] protocolRecord
	//
	// [3] = [WRITE, SIGNER] user
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRegisterProtocolTokenInstructionBuilder creates a new `RegisterProtocolToken` instruction builder.
func NewRegisterProtocolTokenInstructionBuilder() *RegisterProtocolToken {
	nd := &RegisterProtocolToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *RegisterProtocolToken) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *RegisterProtocolToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(gridBotState)
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *RegisterProtocolToken) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *RegisterProtocolToken) SetMintAccount(mint ag_solanago.PublicKey) *RegisterProtocolToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *RegisterProtocolToken) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProtocolRecordAccount sets the "protocolRecord" account.
func (inst *RegisterProtocolToken) SetProtocolRecordAccount(protocolRecord ag_solanago.PublicKey) *RegisterProtocolToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(protocolRecord).WRITE()
	return inst
}

// GetProtocolRecordAccount gets the "protocolRecord" account.
func (inst *RegisterProtocolToken) GetProtocolRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserAccount sets the "user" account.
func (inst *RegisterProtocolToken) SetUserAccount(user ag_solanago.PublicKey) *RegisterProtocolToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *RegisterProtocolToken) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RegisterProtocolToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RegisterProtocolToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RegisterProtocolToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst RegisterProtocolToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RegisterProtocolToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RegisterProtocolToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RegisterProtocolToken) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ProtocolRecord is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *RegisterProtocolToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RegisterProtocolToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  gridBotState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("protocolRecord", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          user", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj RegisterProtocolToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RegisterProtocolToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRegisterProtocolTokenInstruction declares a new RegisterProtocolToken instruction with the provided parameters and accounts.
func NewRegisterProtocolTokenInstruction(
	// Accounts:
	gridBotState ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	protocolRecord ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *RegisterProtocolToken {
	return NewRegisterProtocolTokenInstructionBuilder().
		SetGridBotStateAccount(gridBotState).
		SetMintAccount(mint).
		SetProtocolRecordAccount(protocolRecord).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
