// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawProtocolFee is the `withdrawProtocolFee` instruction.
type WithdrawProtocolFee struct {
	Amount *uint64
	Bump   *uint8

	// [0] = [] gridBotState
	//
	// [1] = [] mint
	//
	// [2] = [WRITE] toUser
	//
	// [3] = [] protocolBalanceUser
	//
	// [4] = [WRITE] protocolBalance
	//
	// [5] = [] tokenProgram
	//
	// [6] = [WRITE, SIGNER] user
	//
	// [7] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawProtocolFeeInstructionBuilder creates a new `WithdrawProtocolFee` instruction builder.
func NewWithdrawProtocolFeeInstructionBuilder() *WithdrawProtocolFee {
	nd := &WithdrawProtocolFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawProtocolFee) SetAmount(amount uint64) *WithdrawProtocolFee {
	inst.Amount = &amount
	return inst
}

// SetBump sets the "bump" parameter.
func (inst *WithdrawProtocolFee) SetBump(bump uint8) *WithdrawProtocolFee {
	inst.Bump = &bump
	return inst
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *WithdrawProtocolFee) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(gridBotState)
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *WithdrawProtocolFee) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *WithdrawProtocolFee) SetMintAccount(mint ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *WithdrawProtocolFee) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetToUserAccount sets the "toUser" account.
func (inst *WithdrawProtocolFee) SetToUserAccount(toUser ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(toUser).WRITE()
	return inst
}

// GetToUserAccount gets the "toUser" account.
func (inst *WithdrawProtocolFee) GetToUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProtocolBalanceUserAccount sets the "protocolBalanceUser" account.
func (inst *WithdrawProtocolFee) SetProtocolBalanceUserAccount(protocolBalanceUser ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(protocolBalanceUser)
	return inst
}

// GetProtocolBalanceUserAccount gets the "protocolBalanceUser" account.
func (inst *WithdrawProtocolFee) GetProtocolBalanceUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProtocolBalanceAccount sets the "protocolBalance" account.
func (inst *WithdrawProtocolFee) SetProtocolBalanceAccount(protocolBalance ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(protocolBalance).WRITE()
	return inst
}

// GetProtocolBalanceAccount gets the "protocolBalance" account.
func (inst *WithdrawProtocolFee) GetProtocolBalanceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawProtocolFee) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawProtocolFee) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserAccount sets the "user" account.
func (inst *WithdrawProtocolFee) SetUserAccount(user ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *WithdrawProtocolFee) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *WithdrawProtocolFee) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *WithdrawProtocolFee) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst WithdrawProtocolFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawProtocolFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawProtocolFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawProtocolFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ToUser is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProtocolBalanceUser is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProtocolBalance is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawProtocolFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawProtocolFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  Bump", *inst.Bump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       gridBotState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             toUser", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("protocolBalanceUser", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    protocolBalance", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("               user", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      systemProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj WithdrawProtocolFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawProtocolFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawProtocolFeeInstruction declares a new WithdrawProtocolFee instruction with the provided parameters and accounts.
func NewWithdrawProtocolFeeInstruction(
	// Parameters:
	amount uint64,
	bump uint8,
	// Accounts:
	gridBotState ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	toUser ag_solanago.PublicKey,
	protocolBalanceUser ag_solanago.PublicKey,
	protocolBalance ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *WithdrawProtocolFee {
	return NewWithdrawProtocolFeeInstructionBuilder().
		SetAmount(amount).
		SetBump(bump).
		SetGridBotStateAccount(gridBotState).
		SetMintAccount(mint).
		SetToUserAccount(toUser).
		SetProtocolBalanceUserAccount(protocolBalanceUser).
		SetProtocolBalanceAccount(protocolBalance).
		SetTokenProgramAccount(tokenProgram).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
