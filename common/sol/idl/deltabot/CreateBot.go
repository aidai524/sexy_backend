// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateBot is the `createBot` instruction.
type CreateBot struct {
	Name             *string
	GridType         *uint8
	GridRate         *uint16
	GridOffset       *uint64
	FirstBaseAmount  *uint64
	FirstQuoteAmount *uint64
	LastBaseAmount   *uint64
	LastQuoteAmount  *uint64
	FillBaseOrQuote  *bool
	ValidUntilTime   *uint64
	EntryPrice       *uint64
	RecommenderOp    *ag_solanago.PublicKey `bin:"optional"`

	// [0] = [] gridBotState
	//
	// [1] = [WRITE] userState
	//
	// [2] = [] baseMint
	//
	// [3] = [] quoteMint
	//
	// [4] = [] clock
	//
	// [5] = [] pair
	//
	// [6] = [WRITE] gridBot
	//
	// [7] = [] globalBalanceBaseUser
	//
	// [8] = [WRITE] globalBalanceBase
	//
	// [9] = [] globalBalanceQuoteUser
	//
	// [10] = [WRITE] globalBalanceQuote
	//
	// [11] = [] depositLimitBase
	//
	// [12] = [] depositLimitQuote
	//
	// [13] = [WRITE] userBaseTokenAccount
	//
	// [14] = [WRITE] userQuoteTokenAccount
	//
	// [15] = [WRITE] referralRecord
	//
	// [16] = [] tokenProgram
	//
	// [17] = [] associatedTokenProgram
	//
	// [18] = [WRITE, SIGNER] user
	//
	// [19] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateBotInstructionBuilder creates a new `CreateBot` instruction builder.
func NewCreateBotInstructionBuilder() *CreateBot {
	nd := &CreateBot{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 20),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *CreateBot) SetName(name string) *CreateBot {
	inst.Name = &name
	return inst
}

// SetGridType sets the "gridType" parameter.
func (inst *CreateBot) SetGridType(gridType uint8) *CreateBot {
	inst.GridType = &gridType
	return inst
}

// SetGridRate sets the "gridRate" parameter.
func (inst *CreateBot) SetGridRate(gridRate uint16) *CreateBot {
	inst.GridRate = &gridRate
	return inst
}

// SetGridOffset sets the "gridOffset" parameter.
func (inst *CreateBot) SetGridOffset(gridOffset uint64) *CreateBot {
	inst.GridOffset = &gridOffset
	return inst
}

// SetFirstBaseAmount sets the "firstBaseAmount" parameter.
func (inst *CreateBot) SetFirstBaseAmount(firstBaseAmount uint64) *CreateBot {
	inst.FirstBaseAmount = &firstBaseAmount
	return inst
}

// SetFirstQuoteAmount sets the "firstQuoteAmount" parameter.
func (inst *CreateBot) SetFirstQuoteAmount(firstQuoteAmount uint64) *CreateBot {
	inst.FirstQuoteAmount = &firstQuoteAmount
	return inst
}

// SetLastBaseAmount sets the "lastBaseAmount" parameter.
func (inst *CreateBot) SetLastBaseAmount(lastBaseAmount uint64) *CreateBot {
	inst.LastBaseAmount = &lastBaseAmount
	return inst
}

// SetLastQuoteAmount sets the "lastQuoteAmount" parameter.
func (inst *CreateBot) SetLastQuoteAmount(lastQuoteAmount uint64) *CreateBot {
	inst.LastQuoteAmount = &lastQuoteAmount
	return inst
}

// SetFillBaseOrQuote sets the "fillBaseOrQuote" parameter.
func (inst *CreateBot) SetFillBaseOrQuote(fillBaseOrQuote bool) *CreateBot {
	inst.FillBaseOrQuote = &fillBaseOrQuote
	return inst
}

// SetValidUntilTime sets the "validUntilTime" parameter.
func (inst *CreateBot) SetValidUntilTime(validUntilTime uint64) *CreateBot {
	inst.ValidUntilTime = &validUntilTime
	return inst
}

// SetEntryPrice sets the "entryPrice" parameter.
func (inst *CreateBot) SetEntryPrice(entryPrice uint64) *CreateBot {
	inst.EntryPrice = &entryPrice
	return inst
}

// SetRecommenderOp sets the "recommenderOp" parameter.
func (inst *CreateBot) SetRecommenderOp(recommenderOp ag_solanago.PublicKey) *CreateBot {
	inst.RecommenderOp = &recommenderOp
	return inst
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *CreateBot) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(gridBotState)
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *CreateBot) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserStateAccount sets the "userState" account.
func (inst *CreateBot) SetUserStateAccount(userState ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userState).WRITE()
	return inst
}

// GetUserStateAccount gets the "userState" account.
func (inst *CreateBot) GetUserStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBaseMintAccount sets the "baseMint" account.
func (inst *CreateBot) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "baseMint" account.
func (inst *CreateBot) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQuoteMintAccount sets the "quoteMint" account.
func (inst *CreateBot) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quoteMint" account.
func (inst *CreateBot) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetClockAccount sets the "clock" account.
func (inst *CreateBot) SetClockAccount(clock ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *CreateBot) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPairAccount sets the "pair" account.
func (inst *CreateBot) SetPairAccount(pair ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(pair)
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *CreateBot) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetGridBotAccount sets the "gridBot" account.
func (inst *CreateBot) SetGridBotAccount(gridBot ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(gridBot).WRITE()
	return inst
}

// GetGridBotAccount gets the "gridBot" account.
func (inst *CreateBot) GetGridBotAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetGlobalBalanceBaseUserAccount sets the "globalBalanceBaseUser" account.
func (inst *CreateBot) SetGlobalBalanceBaseUserAccount(globalBalanceBaseUser ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(globalBalanceBaseUser)
	return inst
}

// GetGlobalBalanceBaseUserAccount gets the "globalBalanceBaseUser" account.
func (inst *CreateBot) GetGlobalBalanceBaseUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetGlobalBalanceBaseAccount sets the "globalBalanceBase" account.
func (inst *CreateBot) SetGlobalBalanceBaseAccount(globalBalanceBase ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(globalBalanceBase).WRITE()
	return inst
}

// GetGlobalBalanceBaseAccount gets the "globalBalanceBase" account.
func (inst *CreateBot) GetGlobalBalanceBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetGlobalBalanceQuoteUserAccount sets the "globalBalanceQuoteUser" account.
func (inst *CreateBot) SetGlobalBalanceQuoteUserAccount(globalBalanceQuoteUser ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(globalBalanceQuoteUser)
	return inst
}

// GetGlobalBalanceQuoteUserAccount gets the "globalBalanceQuoteUser" account.
func (inst *CreateBot) GetGlobalBalanceQuoteUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetGlobalBalanceQuoteAccount sets the "globalBalanceQuote" account.
func (inst *CreateBot) SetGlobalBalanceQuoteAccount(globalBalanceQuote ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(globalBalanceQuote).WRITE()
	return inst
}

// GetGlobalBalanceQuoteAccount gets the "globalBalanceQuote" account.
func (inst *CreateBot) GetGlobalBalanceQuoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetDepositLimitBaseAccount sets the "depositLimitBase" account.
func (inst *CreateBot) SetDepositLimitBaseAccount(depositLimitBase ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(depositLimitBase)
	return inst
}

// GetDepositLimitBaseAccount gets the "depositLimitBase" account.
func (inst *CreateBot) GetDepositLimitBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetDepositLimitQuoteAccount sets the "depositLimitQuote" account.
func (inst *CreateBot) SetDepositLimitQuoteAccount(depositLimitQuote ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(depositLimitQuote)
	return inst
}

// GetDepositLimitQuoteAccount gets the "depositLimitQuote" account.
func (inst *CreateBot) GetDepositLimitQuoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetUserBaseTokenAccountAccount sets the "userBaseTokenAccount" account.
func (inst *CreateBot) SetUserBaseTokenAccountAccount(userBaseTokenAccount ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(userBaseTokenAccount).WRITE()
	return inst
}

// GetUserBaseTokenAccountAccount gets the "userBaseTokenAccount" account.
func (inst *CreateBot) GetUserBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetUserQuoteTokenAccountAccount sets the "userQuoteTokenAccount" account.
func (inst *CreateBot) SetUserQuoteTokenAccountAccount(userQuoteTokenAccount ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(userQuoteTokenAccount).WRITE()
	return inst
}

// GetUserQuoteTokenAccountAccount gets the "userQuoteTokenAccount" account.
func (inst *CreateBot) GetUserQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetReferralRecordAccount sets the "referralRecord" account.
func (inst *CreateBot) SetReferralRecordAccount(referralRecord ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(referralRecord).WRITE()
	return inst
}

// GetReferralRecordAccount gets the "referralRecord" account.
func (inst *CreateBot) GetReferralRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateBot) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateBot) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *CreateBot) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *CreateBot) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetUserAccount sets the "user" account.
func (inst *CreateBot) SetUserAccount(user ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *CreateBot) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateBot) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateBot {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateBot) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

func (inst CreateBot) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateBot,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateBot) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateBot) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.GridType == nil {
			return errors.New("GridType parameter is not set")
		}
		if inst.GridRate == nil {
			return errors.New("GridRate parameter is not set")
		}
		if inst.GridOffset == nil {
			return errors.New("GridOffset parameter is not set")
		}
		if inst.FirstBaseAmount == nil {
			return errors.New("FirstBaseAmount parameter is not set")
		}
		if inst.FirstQuoteAmount == nil {
			return errors.New("FirstQuoteAmount parameter is not set")
		}
		if inst.LastBaseAmount == nil {
			return errors.New("LastBaseAmount parameter is not set")
		}
		if inst.LastQuoteAmount == nil {
			return errors.New("LastQuoteAmount parameter is not set")
		}
		if inst.FillBaseOrQuote == nil {
			return errors.New("FillBaseOrQuote parameter is not set")
		}
		if inst.ValidUntilTime == nil {
			return errors.New("ValidUntilTime parameter is not set")
		}
		if inst.EntryPrice == nil {
			return errors.New("EntryPrice parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.GridBot is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.GlobalBalanceBaseUser is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.GlobalBalanceBase is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.GlobalBalanceQuoteUser is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.GlobalBalanceQuote is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.DepositLimitBase is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.DepositLimitQuote is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.UserBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.UserQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.ReferralRecord is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateBot) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateBot")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=12]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("            Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("        GridType", *inst.GridType))
						paramsBranch.Child(ag_format.Param("        GridRate", *inst.GridRate))
						paramsBranch.Child(ag_format.Param("      GridOffset", *inst.GridOffset))
						paramsBranch.Child(ag_format.Param(" FirstBaseAmount", *inst.FirstBaseAmount))
						paramsBranch.Child(ag_format.Param("FirstQuoteAmount", *inst.FirstQuoteAmount))
						paramsBranch.Child(ag_format.Param("  LastBaseAmount", *inst.LastBaseAmount))
						paramsBranch.Child(ag_format.Param(" LastQuoteAmount", *inst.LastQuoteAmount))
						paramsBranch.Child(ag_format.Param(" FillBaseOrQuote", *inst.FillBaseOrQuote))
						paramsBranch.Child(ag_format.Param("  ValidUntilTime", *inst.ValidUntilTime))
						paramsBranch.Child(ag_format.Param("      EntryPrice", *inst.EntryPrice))
						paramsBranch.Child(ag_format.Param("   RecommenderOp (OPT)", inst.RecommenderOp))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=20]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          gridBotState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             userState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              baseMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             quoteMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 clock", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  pair", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("               gridBot", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" globalBalanceBaseUser", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     globalBalanceBase", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("globalBalanceQuoteUser", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    globalBalanceQuote", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("      depositLimitBase", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("     depositLimitQuote", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("         userBaseToken", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        userQuoteToken", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("        referralRecord", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(19)))
					})
				})
		})
}

func (obj CreateBot) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `GridType` param:
	err = encoder.Encode(obj.GridType)
	if err != nil {
		return err
	}
	// Serialize `GridRate` param:
	err = encoder.Encode(obj.GridRate)
	if err != nil {
		return err
	}
	// Serialize `GridOffset` param:
	err = encoder.Encode(obj.GridOffset)
	if err != nil {
		return err
	}
	// Serialize `FirstBaseAmount` param:
	err = encoder.Encode(obj.FirstBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `FirstQuoteAmount` param:
	err = encoder.Encode(obj.FirstQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `LastBaseAmount` param:
	err = encoder.Encode(obj.LastBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `LastQuoteAmount` param:
	err = encoder.Encode(obj.LastQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `FillBaseOrQuote` param:
	err = encoder.Encode(obj.FillBaseOrQuote)
	if err != nil {
		return err
	}
	// Serialize `ValidUntilTime` param:
	err = encoder.Encode(obj.ValidUntilTime)
	if err != nil {
		return err
	}
	// Serialize `EntryPrice` param:
	err = encoder.Encode(obj.EntryPrice)
	if err != nil {
		return err
	}
	// Serialize `RecommenderOp` param (optional):
	{
		if obj.RecommenderOp == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RecommenderOp)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *CreateBot) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `GridType`:
	err = decoder.Decode(&obj.GridType)
	if err != nil {
		return err
	}
	// Deserialize `GridRate`:
	err = decoder.Decode(&obj.GridRate)
	if err != nil {
		return err
	}
	// Deserialize `GridOffset`:
	err = decoder.Decode(&obj.GridOffset)
	if err != nil {
		return err
	}
	// Deserialize `FirstBaseAmount`:
	err = decoder.Decode(&obj.FirstBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `FirstQuoteAmount`:
	err = decoder.Decode(&obj.FirstQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `LastBaseAmount`:
	err = decoder.Decode(&obj.LastBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `LastQuoteAmount`:
	err = decoder.Decode(&obj.LastQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `FillBaseOrQuote`:
	err = decoder.Decode(&obj.FillBaseOrQuote)
	if err != nil {
		return err
	}
	// Deserialize `ValidUntilTime`:
	err = decoder.Decode(&obj.ValidUntilTime)
	if err != nil {
		return err
	}
	// Deserialize `EntryPrice`:
	err = decoder.Decode(&obj.EntryPrice)
	if err != nil {
		return err
	}
	// Deserialize `RecommenderOp` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RecommenderOp)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewCreateBotInstruction declares a new CreateBot instruction with the provided parameters and accounts.
func NewCreateBotInstruction(
	// Parameters:
	name string,
	gridType uint8,
	gridRate uint16,
	gridOffset uint64,
	firstBaseAmount uint64,
	firstQuoteAmount uint64,
	lastBaseAmount uint64,
	lastQuoteAmount uint64,
	fillBaseOrQuote bool,
	validUntilTime uint64,
	entryPrice uint64,
	recommenderOp ag_solanago.PublicKey,
	// Accounts:
	gridBotState ag_solanago.PublicKey,
	userState ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	gridBot ag_solanago.PublicKey,
	globalBalanceBaseUser ag_solanago.PublicKey,
	globalBalanceBase ag_solanago.PublicKey,
	globalBalanceQuoteUser ag_solanago.PublicKey,
	globalBalanceQuote ag_solanago.PublicKey,
	depositLimitBase ag_solanago.PublicKey,
	depositLimitQuote ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	referralRecord ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateBot {
	return NewCreateBotInstructionBuilder().
		SetName(name).
		SetGridType(gridType).
		SetGridRate(gridRate).
		SetGridOffset(gridOffset).
		SetFirstBaseAmount(firstBaseAmount).
		SetFirstQuoteAmount(firstQuoteAmount).
		SetLastBaseAmount(lastBaseAmount).
		SetLastQuoteAmount(lastQuoteAmount).
		SetFillBaseOrQuote(fillBaseOrQuote).
		SetValidUntilTime(validUntilTime).
		SetEntryPrice(entryPrice).
		SetRecommenderOp(recommenderOp).
		SetGridBotStateAccount(gridBotState).
		SetUserStateAccount(userState).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetClockAccount(clock).
		SetPairAccount(pair).
		SetGridBotAccount(gridBot).
		SetGlobalBalanceBaseUserAccount(globalBalanceBaseUser).
		SetGlobalBalanceBaseAccount(globalBalanceBase).
		SetGlobalBalanceQuoteUserAccount(globalBalanceQuoteUser).
		SetGlobalBalanceQuoteAccount(globalBalanceQuote).
		SetDepositLimitBaseAccount(depositLimitBase).
		SetDepositLimitQuoteAccount(depositLimitQuote).
		SetUserBaseTokenAccountAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccountAccount(userQuoteTokenAccount).
		SetReferralRecordAccount(referralRecord).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
