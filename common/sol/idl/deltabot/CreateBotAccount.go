// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateBotAccount is the `createBotAccount` instruction.
type CreateBotAccount struct {
	GridSellCount *uint16
	GridBuyCount  *uint16

	// [0] = [WRITE] gridBotState
	//
	// [1] = [WRITE] userState
	//
	// [2] = [WRITE] gridBot
	//
	// [3] = [WRITE, SIGNER] user
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateBotAccountInstructionBuilder creates a new `CreateBotAccount` instruction builder.
func NewCreateBotAccountInstructionBuilder() *CreateBotAccount {
	nd := &CreateBotAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetGridSellCount sets the "gridSellCount" parameter.
func (inst *CreateBotAccount) SetGridSellCount(gridSellCount uint16) *CreateBotAccount {
	inst.GridSellCount = &gridSellCount
	return inst
}

// SetGridBuyCount sets the "gridBuyCount" parameter.
func (inst *CreateBotAccount) SetGridBuyCount(gridBuyCount uint16) *CreateBotAccount {
	inst.GridBuyCount = &gridBuyCount
	return inst
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *CreateBotAccount) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *CreateBotAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(gridBotState).WRITE()
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *CreateBotAccount) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserStateAccount sets the "userState" account.
func (inst *CreateBotAccount) SetUserStateAccount(userState ag_solanago.PublicKey) *CreateBotAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userState).WRITE()
	return inst
}

// GetUserStateAccount gets the "userState" account.
func (inst *CreateBotAccount) GetUserStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGridBotAccount sets the "gridBot" account.
func (inst *CreateBotAccount) SetGridBotAccount(gridBot ag_solanago.PublicKey) *CreateBotAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(gridBot).WRITE()
	return inst
}

// GetGridBotAccount gets the "gridBot" account.
func (inst *CreateBotAccount) GetGridBotAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserAccount sets the "user" account.
func (inst *CreateBotAccount) SetUserAccount(user ag_solanago.PublicKey) *CreateBotAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *CreateBotAccount) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateBotAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateBotAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateBotAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CreateBotAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateBotAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateBotAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateBotAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.GridSellCount == nil {
			return errors.New("GridSellCount parameter is not set")
		}
		if inst.GridBuyCount == nil {
			return errors.New("GridBuyCount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.GridBot is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateBotAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateBotAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("GridSellCount", *inst.GridSellCount))
						paramsBranch.Child(ag_format.Param(" GridBuyCount", *inst.GridBuyCount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" gridBotState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    userState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      gridBot", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         user", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateBotAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `GridSellCount` param:
	err = encoder.Encode(obj.GridSellCount)
	if err != nil {
		return err
	}
	// Serialize `GridBuyCount` param:
	err = encoder.Encode(obj.GridBuyCount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateBotAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `GridSellCount`:
	err = decoder.Decode(&obj.GridSellCount)
	if err != nil {
		return err
	}
	// Deserialize `GridBuyCount`:
	err = decoder.Decode(&obj.GridBuyCount)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateBotAccountInstruction declares a new CreateBotAccount instruction with the provided parameters and accounts.
func NewCreateBotAccountInstruction(
	// Parameters:
	gridSellCount uint16,
	gridBuyCount uint16,
	// Accounts:
	gridBotState ag_solanago.PublicKey,
	userState ag_solanago.PublicKey,
	gridBot ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateBotAccount {
	return NewCreateBotAccountInstructionBuilder().
		SetGridSellCount(gridSellCount).
		SetGridBuyCount(gridBuyCount).
		SetGridBotStateAccount(gridBotState).
		SetUserStateAccount(userState).
		SetGridBotAccount(gridBot).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
