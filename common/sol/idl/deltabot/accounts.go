// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type MakerUsers struct {
	Users []ag_solanago.PublicKey
}

var MakerUsersDiscriminator = [8]byte{193, 137, 23, 159, 125, 66, 219, 44}

func (obj MakerUsers) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MakerUsersDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Users` param:
	err = encoder.Encode(obj.Users)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MakerUsers) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MakerUsersDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[193 137 23 159 125 66 219 44]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Users`:
	err = decoder.Decode(&obj.Users)
	if err != nil {
		return err
	}
	return nil
}

type GridBotState struct {
	IsInitialized   bool
	OwnerId         ag_solanago.PublicKey
	OracleValidTime uint64
	Status          GridStatus

	// real_protocol_fee = protocol_fee / 1000000
	ProtocolFeeRate uint32
	TakerFeeRate    uint32
	ReferFeeRate    uint32

	// start from 0, used from 1
	NextBotId uint64
}

var GridBotStateDiscriminator = [8]byte{44, 238, 83, 114, 41, 91, 244, 4}

func (obj GridBotState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GridBotStateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `OwnerId` param:
	err = encoder.Encode(obj.OwnerId)
	if err != nil {
		return err
	}
	// Serialize `OracleValidTime` param:
	err = encoder.Encode(obj.OracleValidTime)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `TakerFeeRate` param:
	err = encoder.Encode(obj.TakerFeeRate)
	if err != nil {
		return err
	}
	// Serialize `ReferFeeRate` param:
	err = encoder.Encode(obj.ReferFeeRate)
	if err != nil {
		return err
	}
	// Serialize `NextBotId` param:
	err = encoder.Encode(obj.NextBotId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GridBotState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GridBotStateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[44 238 83 114 41 91 244 4]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `OwnerId`:
	err = decoder.Decode(&obj.OwnerId)
	if err != nil {
		return err
	}
	// Deserialize `OracleValidTime`:
	err = decoder.Decode(&obj.OracleValidTime)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `TakerFeeRate`:
	err = decoder.Decode(&obj.TakerFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `ReferFeeRate`:
	err = decoder.Decode(&obj.ReferFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `NextBotId`:
	err = decoder.Decode(&obj.NextBotId)
	if err != nil {
		return err
	}
	return nil
}

type UserState struct {
	NextUserBotId uint32
}

var UserStateDiscriminator = [8]byte{72, 177, 85, 249, 76, 167, 186, 126}

func (obj UserState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserStateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `NextUserBotId` param:
	err = encoder.Encode(obj.NextUserBotId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserStateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[72 177 85 249 76 167 186 126]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `NextUserBotId`:
	err = decoder.Decode(&obj.NextUserBotId)
	if err != nil {
		return err
	}
	return nil
}

type DataRecord struct {
	Data uint64
}

var DataRecordDiscriminator = [8]byte{51, 30, 73, 146, 52, 76, 80, 152}

func (obj DataRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DataRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DataRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DataRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[51 30 73 146 52 76 80 152]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type ReferralRecord struct {
	User ag_solanago.PublicKey
}

var ReferralRecordDiscriminator = [8]byte{225, 215, 211, 93, 50, 168, 252, 185}

func (obj ReferralRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ReferralRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReferralRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ReferralRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[225 215 211 93 50 168 252 185]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	return nil
}

type GridBot struct {
	IsInitialized bool
	Name          string
	Active        bool
	User          ag_solanago.PublicKey
	BotId         uint64
	Closed        bool
	PairId        string
	GridType      uint8
	GridSellCount uint16
	GridBuyCount  uint16

	// real_grid_rate = grid_rate / 10000
	GridRate         uint16
	GridOffset       uint64
	FirstBaseAmount  uint64
	FirstQuoteAmount uint64
	LastBaseAmount   uint64
	LastQuoteAmount  uint64
	FillBaseOrQuote  bool
	ValidUntilTime   uint64
	TotalQuoteAmount uint64
	TotalBaseAmount  uint64
	Revenue          uint64
	TotalRevenue     uint64
}

var GridBotDiscriminator = [8]byte{19, 221, 40, 166, 235, 29, 116, 165}

func (obj GridBot) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GridBotDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Active` param:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `BotId` param:
	err = encoder.Encode(obj.BotId)
	if err != nil {
		return err
	}
	// Serialize `Closed` param:
	err = encoder.Encode(obj.Closed)
	if err != nil {
		return err
	}
	// Serialize `PairId` param:
	err = encoder.Encode(obj.PairId)
	if err != nil {
		return err
	}
	// Serialize `GridType` param:
	err = encoder.Encode(obj.GridType)
	if err != nil {
		return err
	}
	// Serialize `GridSellCount` param:
	err = encoder.Encode(obj.GridSellCount)
	if err != nil {
		return err
	}
	// Serialize `GridBuyCount` param:
	err = encoder.Encode(obj.GridBuyCount)
	if err != nil {
		return err
	}
	// Serialize `GridRate` param:
	err = encoder.Encode(obj.GridRate)
	if err != nil {
		return err
	}
	// Serialize `GridOffset` param:
	err = encoder.Encode(obj.GridOffset)
	if err != nil {
		return err
	}
	// Serialize `FirstBaseAmount` param:
	err = encoder.Encode(obj.FirstBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `FirstQuoteAmount` param:
	err = encoder.Encode(obj.FirstQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `LastBaseAmount` param:
	err = encoder.Encode(obj.LastBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `LastQuoteAmount` param:
	err = encoder.Encode(obj.LastQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `FillBaseOrQuote` param:
	err = encoder.Encode(obj.FillBaseOrQuote)
	if err != nil {
		return err
	}
	// Serialize `ValidUntilTime` param:
	err = encoder.Encode(obj.ValidUntilTime)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteAmount` param:
	err = encoder.Encode(obj.TotalQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalBaseAmount` param:
	err = encoder.Encode(obj.TotalBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `Revenue` param:
	err = encoder.Encode(obj.Revenue)
	if err != nil {
		return err
	}
	// Serialize `TotalRevenue` param:
	err = encoder.Encode(obj.TotalRevenue)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GridBot) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GridBotDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[19 221 40 166 235 29 116 165]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `BotId`:
	err = decoder.Decode(&obj.BotId)
	if err != nil {
		return err
	}
	// Deserialize `Closed`:
	err = decoder.Decode(&obj.Closed)
	if err != nil {
		return err
	}
	// Deserialize `PairId`:
	err = decoder.Decode(&obj.PairId)
	if err != nil {
		return err
	}
	// Deserialize `GridType`:
	err = decoder.Decode(&obj.GridType)
	if err != nil {
		return err
	}
	// Deserialize `GridSellCount`:
	err = decoder.Decode(&obj.GridSellCount)
	if err != nil {
		return err
	}
	// Deserialize `GridBuyCount`:
	err = decoder.Decode(&obj.GridBuyCount)
	if err != nil {
		return err
	}
	// Deserialize `GridRate`:
	err = decoder.Decode(&obj.GridRate)
	if err != nil {
		return err
	}
	// Deserialize `GridOffset`:
	err = decoder.Decode(&obj.GridOffset)
	if err != nil {
		return err
	}
	// Deserialize `FirstBaseAmount`:
	err = decoder.Decode(&obj.FirstBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `FirstQuoteAmount`:
	err = decoder.Decode(&obj.FirstQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `LastBaseAmount`:
	err = decoder.Decode(&obj.LastBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `LastQuoteAmount`:
	err = decoder.Decode(&obj.LastQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `FillBaseOrQuote`:
	err = decoder.Decode(&obj.FillBaseOrQuote)
	if err != nil {
		return err
	}
	// Deserialize `ValidUntilTime`:
	err = decoder.Decode(&obj.ValidUntilTime)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteAmount`:
	err = decoder.Decode(&obj.TotalQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalBaseAmount`:
	err = decoder.Decode(&obj.TotalBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `Revenue`:
	err = decoder.Decode(&obj.Revenue)
	if err != nil {
		return err
	}
	// Deserialize `TotalRevenue`:
	err = decoder.Decode(&obj.TotalRevenue)
	if err != nil {
		return err
	}
	return nil
}

type Order struct {
	TokenSellIsBase bool
	FillBuyOrSell   bool
	AmountSell      uint64
	AmountBuy       uint64
	Filled          uint64
}

var OrderDiscriminator = [8]byte{134, 173, 223, 185, 77, 86, 28, 51}

func (obj Order) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TokenSellIsBase` param:
	err = encoder.Encode(obj.TokenSellIsBase)
	if err != nil {
		return err
	}
	// Serialize `FillBuyOrSell` param:
	err = encoder.Encode(obj.FillBuyOrSell)
	if err != nil {
		return err
	}
	// Serialize `AmountSell` param:
	err = encoder.Encode(obj.AmountSell)
	if err != nil {
		return err
	}
	// Serialize `AmountBuy` param:
	err = encoder.Encode(obj.AmountBuy)
	if err != nil {
		return err
	}
	// Serialize `Filled` param:
	err = encoder.Encode(obj.Filled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Order) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[134 173 223 185 77 86 28 51]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TokenSellIsBase`:
	err = decoder.Decode(&obj.TokenSellIsBase)
	if err != nil {
		return err
	}
	// Deserialize `FillBuyOrSell`:
	err = decoder.Decode(&obj.FillBuyOrSell)
	if err != nil {
		return err
	}
	// Deserialize `AmountSell`:
	err = decoder.Decode(&obj.AmountSell)
	if err != nil {
		return err
	}
	// Deserialize `AmountBuy`:
	err = decoder.Decode(&obj.AmountBuy)
	if err != nil {
		return err
	}
	// Deserialize `Filled`:
	err = decoder.Decode(&obj.Filled)
	if err != nil {
		return err
	}
	return nil
}

type Pair struct {
	BaseToken  ag_solanago.PublicKey
	QuoteToken ag_solanago.PublicKey
}

var PairDiscriminator = [8]byte{85, 72, 49, 176, 182, 228, 141, 82}

func (obj Pair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PairDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `BaseToken` param:
	err = encoder.Encode(obj.BaseToken)
	if err != nil {
		return err
	}
	// Serialize `QuoteToken` param:
	err = encoder.Encode(obj.QuoteToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Pair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PairDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[85 72 49 176 182 228 141 82]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `BaseToken`:
	err = decoder.Decode(&obj.BaseToken)
	if err != nil {
		return err
	}
	// Deserialize `QuoteToken`:
	err = decoder.Decode(&obj.QuoteToken)
	if err != nil {
		return err
	}
	return nil
}

type AccountBalance struct {
	Balance ag_binary.Uint128
}

var AccountBalanceDiscriminator = [8]byte{4, 4, 190, 85, 208, 59, 206, 67}

func (obj AccountBalance) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AccountBalanceDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Balance` param:
	err = encoder.Encode(obj.Balance)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AccountBalance) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AccountBalanceDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[4 4 190 85 208 59 206 67]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Balance`:
	err = decoder.Decode(&obj.Balance)
	if err != nil {
		return err
	}
	return nil
}
