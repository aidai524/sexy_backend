// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateOrders is the `createOrders` instruction.
type CreateOrders struct {
	CreateOrderParam *CreateOrdersParam

	// [0] = [] gridBotState
	//
	// [1] = [WRITE] makerForwardOrder
	//
	// [2] = [WRITE] makerReverseOrder
	//
	// [3] = [] tokenProgram
	//
	// [4] = [] associatedTokenProgram
	//
	// [5] = [WRITE, SIGNER] user
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateOrdersInstructionBuilder creates a new `CreateOrders` instruction builder.
func NewCreateOrdersInstructionBuilder() *CreateOrders {
	nd := &CreateOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetCreateOrderParam sets the "createOrderParam" parameter.
func (inst *CreateOrders) SetCreateOrderParam(createOrderParam CreateOrdersParam) *CreateOrders {
	inst.CreateOrderParam = &createOrderParam
	return inst
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *CreateOrders) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *CreateOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(gridBotState)
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *CreateOrders) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMakerForwardOrderAccount sets the "makerForwardOrder" account.
func (inst *CreateOrders) SetMakerForwardOrderAccount(makerForwardOrder ag_solanago.PublicKey) *CreateOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(makerForwardOrder).WRITE()
	return inst
}

// GetMakerForwardOrderAccount gets the "makerForwardOrder" account.
func (inst *CreateOrders) GetMakerForwardOrderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMakerReverseOrderAccount sets the "makerReverseOrder" account.
func (inst *CreateOrders) SetMakerReverseOrderAccount(makerReverseOrder ag_solanago.PublicKey) *CreateOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(makerReverseOrder).WRITE()
	return inst
}

// GetMakerReverseOrderAccount gets the "makerReverseOrder" account.
func (inst *CreateOrders) GetMakerReverseOrderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateOrders) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateOrders) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *CreateOrders) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *CreateOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *CreateOrders) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserAccount sets the "user" account.
func (inst *CreateOrders) SetUserAccount(user ag_solanago.PublicKey) *CreateOrders {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *CreateOrders) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateOrders) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateOrders {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateOrders) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CreateOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateOrders,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateOrders) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CreateOrderParam == nil {
			return errors.New("CreateOrderParam parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MakerForwardOrder is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MakerReverseOrder is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CreateOrderParam", *inst.CreateOrderParam))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          gridBotState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     makerForwardOrder", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     makerReverseOrder", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CreateOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CreateOrderParam` param:
	err = encoder.Encode(obj.CreateOrderParam)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CreateOrderParam`:
	err = decoder.Decode(&obj.CreateOrderParam)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateOrdersInstruction declares a new CreateOrders instruction with the provided parameters and accounts.
func NewCreateOrdersInstruction(
	// Parameters:
	createOrderParam CreateOrdersParam,
	// Accounts:
	gridBotState ag_solanago.PublicKey,
	makerForwardOrder ag_solanago.PublicKey,
	makerReverseOrder ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateOrders {
	return NewCreateOrdersInstructionBuilder().
		SetCreateOrderParam(createOrderParam).
		SetGridBotStateAccount(gridBotState).
		SetMakerForwardOrderAccount(makerForwardOrder).
		SetMakerReverseOrderAccount(makerReverseOrder).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
