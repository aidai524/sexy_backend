// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetMinDeposit is the `setMinDeposit` instruction.
type SetMinDeposit struct {
	MinDeposit *uint64

	// [0] = [] token
	//
	// [1] = [] gridBotState
	//
	// [2] = [WRITE] depositLimit
	//
	// [3] = [WRITE, SIGNER] user
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetMinDepositInstructionBuilder creates a new `SetMinDeposit` instruction builder.
func NewSetMinDepositInstructionBuilder() *SetMinDeposit {
	nd := &SetMinDeposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetMinDeposit sets the "minDeposit" parameter.
func (inst *SetMinDeposit) SetMinDeposit(minDeposit uint64) *SetMinDeposit {
	inst.MinDeposit = &minDeposit
	return inst
}

// SetTokenAccount sets the "token" account.
func (inst *SetMinDeposit) SetTokenAccount(token ag_solanago.PublicKey) *SetMinDeposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(token)
	return inst
}

// GetTokenAccount gets the "token" account.
func (inst *SetMinDeposit) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGridBotStateAccount sets the "gridBotState" account.
func (inst *SetMinDeposit) SetGridBotStateAccount(gridBotState ag_solanago.PublicKey) *SetMinDeposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(gridBotState)
	return inst
}

// GetGridBotStateAccount gets the "gridBotState" account.
func (inst *SetMinDeposit) GetGridBotStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDepositLimitAccount sets the "depositLimit" account.
func (inst *SetMinDeposit) SetDepositLimitAccount(depositLimit ag_solanago.PublicKey) *SetMinDeposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(depositLimit).WRITE()
	return inst
}

// GetDepositLimitAccount gets the "depositLimit" account.
func (inst *SetMinDeposit) GetDepositLimitAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserAccount sets the "user" account.
func (inst *SetMinDeposit) SetUserAccount(user ag_solanago.PublicKey) *SetMinDeposit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *SetMinDeposit) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SetMinDeposit) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SetMinDeposit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SetMinDeposit) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst SetMinDeposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetMinDeposit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetMinDeposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetMinDeposit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinDeposit == nil {
			return errors.New("MinDeposit parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Token is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GridBotState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DepositLimit is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *SetMinDeposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetMinDeposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MinDeposit", *inst.MinDeposit))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        token", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" gridBotState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" depositLimit", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         user", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj SetMinDeposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinDeposit` param:
	err = encoder.Encode(obj.MinDeposit)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetMinDeposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinDeposit`:
	err = decoder.Decode(&obj.MinDeposit)
	if err != nil {
		return err
	}
	return nil
}

// NewSetMinDepositInstruction declares a new SetMinDeposit instruction with the provided parameters and accounts.
func NewSetMinDepositInstruction(
	// Parameters:
	minDeposit uint64,
	// Accounts:
	token ag_solanago.PublicKey,
	gridBotState ag_solanago.PublicKey,
	depositLimit ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *SetMinDeposit {
	return NewSetMinDepositInstructionBuilder().
		SetMinDeposit(minDeposit).
		SetTokenAccount(token).
		SetGridBotStateAccount(gridBotState).
		SetDepositLimitAccount(depositLimit).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
