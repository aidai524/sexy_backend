// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deltabot

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type RegisterPairEvent struct {
	BaseToken  ag_solanago.PublicKey
	QuoteToken ag_solanago.PublicKey
}

func (obj RegisterPairEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseToken` param:
	err = encoder.Encode(obj.BaseToken)
	if err != nil {
		return err
	}
	// Serialize `QuoteToken` param:
	err = encoder.Encode(obj.QuoteToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RegisterPairEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseToken`:
	err = decoder.Decode(&obj.BaseToken)
	if err != nil {
		return err
	}
	// Deserialize `QuoteToken`:
	err = decoder.Decode(&obj.QuoteToken)
	if err != nil {
		return err
	}
	return nil
}

type CreateEvent struct {
	AccountId   ag_solanago.PublicKey
	BotId       string
	UserStateId string
	BasePrice   string
	QuotePrice  string
	BaseExpo    string
	QuoteExpo   string
	EntryPrice  uint64
	Pair        PairOutput
	GridBot     GridBotOutput
}

func (obj CreateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountId` param:
	err = encoder.Encode(obj.AccountId)
	if err != nil {
		return err
	}
	// Serialize `BotId` param:
	err = encoder.Encode(obj.BotId)
	if err != nil {
		return err
	}
	// Serialize `UserStateId` param:
	err = encoder.Encode(obj.UserStateId)
	if err != nil {
		return err
	}
	// Serialize `BasePrice` param:
	err = encoder.Encode(obj.BasePrice)
	if err != nil {
		return err
	}
	// Serialize `QuotePrice` param:
	err = encoder.Encode(obj.QuotePrice)
	if err != nil {
		return err
	}
	// Serialize `BaseExpo` param:
	err = encoder.Encode(obj.BaseExpo)
	if err != nil {
		return err
	}
	// Serialize `QuoteExpo` param:
	err = encoder.Encode(obj.QuoteExpo)
	if err != nil {
		return err
	}
	// Serialize `EntryPrice` param:
	err = encoder.Encode(obj.EntryPrice)
	if err != nil {
		return err
	}
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `GridBot` param:
	err = encoder.Encode(obj.GridBot)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountId`:
	err = decoder.Decode(&obj.AccountId)
	if err != nil {
		return err
	}
	// Deserialize `BotId`:
	err = decoder.Decode(&obj.BotId)
	if err != nil {
		return err
	}
	// Deserialize `UserStateId`:
	err = decoder.Decode(&obj.UserStateId)
	if err != nil {
		return err
	}
	// Deserialize `BasePrice`:
	err = decoder.Decode(&obj.BasePrice)
	if err != nil {
		return err
	}
	// Deserialize `QuotePrice`:
	err = decoder.Decode(&obj.QuotePrice)
	if err != nil {
		return err
	}
	// Deserialize `BaseExpo`:
	err = decoder.Decode(&obj.BaseExpo)
	if err != nil {
		return err
	}
	// Deserialize `QuoteExpo`:
	err = decoder.Decode(&obj.QuoteExpo)
	if err != nil {
		return err
	}
	// Deserialize `EntryPrice`:
	err = decoder.Decode(&obj.EntryPrice)
	if err != nil {
		return err
	}
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `GridBot`:
	err = decoder.Decode(&obj.GridBot)
	if err != nil {
		return err
	}
	return nil
}

type CloseEvent struct {
	AccountId   ag_solanago.PublicKey
	BotId       string
	UserStateId string
	Refund      uint64
}

func (obj CloseEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountId` param:
	err = encoder.Encode(obj.AccountId)
	if err != nil {
		return err
	}
	// Serialize `BotId` param:
	err = encoder.Encode(obj.BotId)
	if err != nil {
		return err
	}
	// Serialize `UserStateId` param:
	err = encoder.Encode(obj.UserStateId)
	if err != nil {
		return err
	}
	// Serialize `Refund` param:
	err = encoder.Encode(obj.Refund)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CloseEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountId`:
	err = decoder.Decode(&obj.AccountId)
	if err != nil {
		return err
	}
	// Deserialize `BotId`:
	err = decoder.Decode(&obj.BotId)
	if err != nil {
		return err
	}
	// Deserialize `UserStateId`:
	err = decoder.Decode(&obj.UserStateId)
	if err != nil {
		return err
	}
	// Deserialize `Refund`:
	err = decoder.Decode(&obj.Refund)
	if err != nil {
		return err
	}
	return nil
}

type OrderUpdateEvent struct {
	BotId            string
	UserStateId      string
	ForwardOrReverse bool
	Level            uint16
	TokenSell        ag_solanago.PublicKey
	TokenBuy         ag_solanago.PublicKey
	AmountSell       uint64
	AmountBuy        uint64
	FillBuyOrSell    bool
	Filled           uint64
}

func (obj OrderUpdateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BotId` param:
	err = encoder.Encode(obj.BotId)
	if err != nil {
		return err
	}
	// Serialize `UserStateId` param:
	err = encoder.Encode(obj.UserStateId)
	if err != nil {
		return err
	}
	// Serialize `ForwardOrReverse` param:
	err = encoder.Encode(obj.ForwardOrReverse)
	if err != nil {
		return err
	}
	// Serialize `Level` param:
	err = encoder.Encode(obj.Level)
	if err != nil {
		return err
	}
	// Serialize `TokenSell` param:
	err = encoder.Encode(obj.TokenSell)
	if err != nil {
		return err
	}
	// Serialize `TokenBuy` param:
	err = encoder.Encode(obj.TokenBuy)
	if err != nil {
		return err
	}
	// Serialize `AmountSell` param:
	err = encoder.Encode(obj.AmountSell)
	if err != nil {
		return err
	}
	// Serialize `AmountBuy` param:
	err = encoder.Encode(obj.AmountBuy)
	if err != nil {
		return err
	}
	// Serialize `FillBuyOrSell` param:
	err = encoder.Encode(obj.FillBuyOrSell)
	if err != nil {
		return err
	}
	// Serialize `Filled` param:
	err = encoder.Encode(obj.Filled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderUpdateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BotId`:
	err = decoder.Decode(&obj.BotId)
	if err != nil {
		return err
	}
	// Deserialize `UserStateId`:
	err = decoder.Decode(&obj.UserStateId)
	if err != nil {
		return err
	}
	// Deserialize `ForwardOrReverse`:
	err = decoder.Decode(&obj.ForwardOrReverse)
	if err != nil {
		return err
	}
	// Deserialize `Level`:
	err = decoder.Decode(&obj.Level)
	if err != nil {
		return err
	}
	// Deserialize `TokenSell`:
	err = decoder.Decode(&obj.TokenSell)
	if err != nil {
		return err
	}
	// Deserialize `TokenBuy`:
	err = decoder.Decode(&obj.TokenBuy)
	if err != nil {
		return err
	}
	// Deserialize `AmountSell`:
	err = decoder.Decode(&obj.AmountSell)
	if err != nil {
		return err
	}
	// Deserialize `AmountBuy`:
	err = decoder.Decode(&obj.AmountBuy)
	if err != nil {
		return err
	}
	// Deserialize `FillBuyOrSell`:
	err = decoder.Decode(&obj.FillBuyOrSell)
	if err != nil {
		return err
	}
	// Deserialize `Filled`:
	err = decoder.Decode(&obj.Filled)
	if err != nil {
		return err
	}
	return nil
}

type TakeOrderEvent struct {
	Taker                 ag_solanago.PublicKey
	Maker                 ag_solanago.PublicKey
	MakerBotId            string
	MakerUserStateId      string
	MakerForwardOrReverse bool
	MakerLevel            uint16
	TookSell              uint64
	TookBuy               uint64
	TakerFee              uint64
	ProtocolFee           uint64
	ReferralFee           uint64
	CurrentRevenue        uint64
	MakerLeftRevenue      uint64
	MakerTotalRevenue     uint64
}

func (obj TakeOrderEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Taker` param:
	err = encoder.Encode(obj.Taker)
	if err != nil {
		return err
	}
	// Serialize `Maker` param:
	err = encoder.Encode(obj.Maker)
	if err != nil {
		return err
	}
	// Serialize `MakerBotId` param:
	err = encoder.Encode(obj.MakerBotId)
	if err != nil {
		return err
	}
	// Serialize `MakerUserStateId` param:
	err = encoder.Encode(obj.MakerUserStateId)
	if err != nil {
		return err
	}
	// Serialize `MakerForwardOrReverse` param:
	err = encoder.Encode(obj.MakerForwardOrReverse)
	if err != nil {
		return err
	}
	// Serialize `MakerLevel` param:
	err = encoder.Encode(obj.MakerLevel)
	if err != nil {
		return err
	}
	// Serialize `TookSell` param:
	err = encoder.Encode(obj.TookSell)
	if err != nil {
		return err
	}
	// Serialize `TookBuy` param:
	err = encoder.Encode(obj.TookBuy)
	if err != nil {
		return err
	}
	// Serialize `TakerFee` param:
	err = encoder.Encode(obj.TakerFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `ReferralFee` param:
	err = encoder.Encode(obj.ReferralFee)
	if err != nil {
		return err
	}
	// Serialize `CurrentRevenue` param:
	err = encoder.Encode(obj.CurrentRevenue)
	if err != nil {
		return err
	}
	// Serialize `MakerLeftRevenue` param:
	err = encoder.Encode(obj.MakerLeftRevenue)
	if err != nil {
		return err
	}
	// Serialize `MakerTotalRevenue` param:
	err = encoder.Encode(obj.MakerTotalRevenue)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TakeOrderEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Taker`:
	err = decoder.Decode(&obj.Taker)
	if err != nil {
		return err
	}
	// Deserialize `Maker`:
	err = decoder.Decode(&obj.Maker)
	if err != nil {
		return err
	}
	// Deserialize `MakerBotId`:
	err = decoder.Decode(&obj.MakerBotId)
	if err != nil {
		return err
	}
	// Deserialize `MakerUserStateId`:
	err = decoder.Decode(&obj.MakerUserStateId)
	if err != nil {
		return err
	}
	// Deserialize `MakerForwardOrReverse`:
	err = decoder.Decode(&obj.MakerForwardOrReverse)
	if err != nil {
		return err
	}
	// Deserialize `MakerLevel`:
	err = decoder.Decode(&obj.MakerLevel)
	if err != nil {
		return err
	}
	// Deserialize `TookSell`:
	err = decoder.Decode(&obj.TookSell)
	if err != nil {
		return err
	}
	// Deserialize `TookBuy`:
	err = decoder.Decode(&obj.TookBuy)
	if err != nil {
		return err
	}
	// Deserialize `TakerFee`:
	err = decoder.Decode(&obj.TakerFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `ReferralFee`:
	err = decoder.Decode(&obj.ReferralFee)
	if err != nil {
		return err
	}
	// Deserialize `CurrentRevenue`:
	err = decoder.Decode(&obj.CurrentRevenue)
	if err != nil {
		return err
	}
	// Deserialize `MakerLeftRevenue`:
	err = decoder.Decode(&obj.MakerLeftRevenue)
	if err != nil {
		return err
	}
	// Deserialize `MakerTotalRevenue`:
	err = decoder.Decode(&obj.MakerTotalRevenue)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawEvent struct {
	From    ag_solanago.PublicKey
	To      ag_solanago.PublicKey
	Amount  uint64
	TokenId ag_solanago.PublicKey
}

func (obj WithdrawEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `TokenId` param:
	err = encoder.Encode(obj.TokenId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `TokenId`:
	err = decoder.Decode(&obj.TokenId)
	if err != nil {
		return err
	}
	return nil
}

type ReferralEvent struct {
	User        ag_solanago.PublicKey
	Recommender ag_solanago.PublicKey
	Amount      uint64
	TokenId     ag_solanago.PublicKey
}

func (obj ReferralEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Recommender` param:
	err = encoder.Encode(obj.Recommender)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `TokenId` param:
	err = encoder.Encode(obj.TokenId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReferralEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Recommender`:
	err = decoder.Decode(&obj.Recommender)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `TokenId`:
	err = decoder.Decode(&obj.TokenId)
	if err != nil {
		return err
	}
	return nil
}

type TransferEvent struct {
	From    ag_solanago.PublicKey
	To      ag_solanago.PublicKey
	Amount  uint64
	TokenId ag_solanago.PublicKey
}

func (obj TransferEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `TokenId` param:
	err = encoder.Encode(obj.TokenId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransferEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `TokenId`:
	err = decoder.Decode(&obj.TokenId)
	if err != nil {
		return err
	}
	return nil
}

type ClaimEvent struct {
	ClaimUser    ag_solanago.PublicKey
	BotId        string
	UserStateId  string
	User         ag_solanago.PublicKey
	RevenueToken ag_solanago.PublicKey
	Revenue      uint64
}

func (obj ClaimEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ClaimUser` param:
	err = encoder.Encode(obj.ClaimUser)
	if err != nil {
		return err
	}
	// Serialize `BotId` param:
	err = encoder.Encode(obj.BotId)
	if err != nil {
		return err
	}
	// Serialize `UserStateId` param:
	err = encoder.Encode(obj.UserStateId)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `RevenueToken` param:
	err = encoder.Encode(obj.RevenueToken)
	if err != nil {
		return err
	}
	// Serialize `Revenue` param:
	err = encoder.Encode(obj.Revenue)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ClaimUser`:
	err = decoder.Decode(&obj.ClaimUser)
	if err != nil {
		return err
	}
	// Deserialize `BotId`:
	err = decoder.Decode(&obj.BotId)
	if err != nil {
		return err
	}
	// Deserialize `UserStateId`:
	err = decoder.Decode(&obj.UserStateId)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `RevenueToken`:
	err = decoder.Decode(&obj.RevenueToken)
	if err != nil {
		return err
	}
	// Deserialize `Revenue`:
	err = decoder.Decode(&obj.Revenue)
	if err != nil {
		return err
	}
	return nil
}

type GridBotOutput struct {
	IsInitialized bool
	Name          string
	Active        bool
	User          ag_solanago.PublicKey
	BotId         uint64
	Closed        bool
	PairId        string
	GridType      uint8
	GridSellCount uint16
	GridBuyCount  uint16

	// real_grid_rate = grid_rate / 10000
	GridRate         uint16
	GridOffset       uint64
	FirstBaseAmount  uint64
	FirstQuoteAmount uint64
	LastBaseAmount   uint64
	LastQuoteAmount  uint64
	FillBaseOrQuote  bool
	ValidUntilTime   uint64
	TotalQuoteAmount uint64
	TotalBaseAmount  uint64
	Revenue          uint64
	TotalRevenue     uint64
}

func (obj GridBotOutput) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Active` param:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `BotId` param:
	err = encoder.Encode(obj.BotId)
	if err != nil {
		return err
	}
	// Serialize `Closed` param:
	err = encoder.Encode(obj.Closed)
	if err != nil {
		return err
	}
	// Serialize `PairId` param:
	err = encoder.Encode(obj.PairId)
	if err != nil {
		return err
	}
	// Serialize `GridType` param:
	err = encoder.Encode(obj.GridType)
	if err != nil {
		return err
	}
	// Serialize `GridSellCount` param:
	err = encoder.Encode(obj.GridSellCount)
	if err != nil {
		return err
	}
	// Serialize `GridBuyCount` param:
	err = encoder.Encode(obj.GridBuyCount)
	if err != nil {
		return err
	}
	// Serialize `GridRate` param:
	err = encoder.Encode(obj.GridRate)
	if err != nil {
		return err
	}
	// Serialize `GridOffset` param:
	err = encoder.Encode(obj.GridOffset)
	if err != nil {
		return err
	}
	// Serialize `FirstBaseAmount` param:
	err = encoder.Encode(obj.FirstBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `FirstQuoteAmount` param:
	err = encoder.Encode(obj.FirstQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `LastBaseAmount` param:
	err = encoder.Encode(obj.LastBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `LastQuoteAmount` param:
	err = encoder.Encode(obj.LastQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `FillBaseOrQuote` param:
	err = encoder.Encode(obj.FillBaseOrQuote)
	if err != nil {
		return err
	}
	// Serialize `ValidUntilTime` param:
	err = encoder.Encode(obj.ValidUntilTime)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteAmount` param:
	err = encoder.Encode(obj.TotalQuoteAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalBaseAmount` param:
	err = encoder.Encode(obj.TotalBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `Revenue` param:
	err = encoder.Encode(obj.Revenue)
	if err != nil {
		return err
	}
	// Serialize `TotalRevenue` param:
	err = encoder.Encode(obj.TotalRevenue)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GridBotOutput) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `BotId`:
	err = decoder.Decode(&obj.BotId)
	if err != nil {
		return err
	}
	// Deserialize `Closed`:
	err = decoder.Decode(&obj.Closed)
	if err != nil {
		return err
	}
	// Deserialize `PairId`:
	err = decoder.Decode(&obj.PairId)
	if err != nil {
		return err
	}
	// Deserialize `GridType`:
	err = decoder.Decode(&obj.GridType)
	if err != nil {
		return err
	}
	// Deserialize `GridSellCount`:
	err = decoder.Decode(&obj.GridSellCount)
	if err != nil {
		return err
	}
	// Deserialize `GridBuyCount`:
	err = decoder.Decode(&obj.GridBuyCount)
	if err != nil {
		return err
	}
	// Deserialize `GridRate`:
	err = decoder.Decode(&obj.GridRate)
	if err != nil {
		return err
	}
	// Deserialize `GridOffset`:
	err = decoder.Decode(&obj.GridOffset)
	if err != nil {
		return err
	}
	// Deserialize `FirstBaseAmount`:
	err = decoder.Decode(&obj.FirstBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `FirstQuoteAmount`:
	err = decoder.Decode(&obj.FirstQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `LastBaseAmount`:
	err = decoder.Decode(&obj.LastBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `LastQuoteAmount`:
	err = decoder.Decode(&obj.LastQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `FillBaseOrQuote`:
	err = decoder.Decode(&obj.FillBaseOrQuote)
	if err != nil {
		return err
	}
	// Deserialize `ValidUntilTime`:
	err = decoder.Decode(&obj.ValidUntilTime)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteAmount`:
	err = decoder.Decode(&obj.TotalQuoteAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalBaseAmount`:
	err = decoder.Decode(&obj.TotalBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `Revenue`:
	err = decoder.Decode(&obj.Revenue)
	if err != nil {
		return err
	}
	// Deserialize `TotalRevenue`:
	err = decoder.Decode(&obj.TotalRevenue)
	if err != nil {
		return err
	}
	return nil
}

type PairOutput struct {
	BaseToken  ag_solanago.PublicKey
	QuoteToken ag_solanago.PublicKey
}

func (obj PairOutput) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseToken` param:
	err = encoder.Encode(obj.BaseToken)
	if err != nil {
		return err
	}
	// Serialize `QuoteToken` param:
	err = encoder.Encode(obj.QuoteToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PairOutput) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseToken`:
	err = decoder.Decode(&obj.BaseToken)
	if err != nil {
		return err
	}
	// Deserialize `QuoteToken`:
	err = decoder.Decode(&obj.QuoteToken)
	if err != nil {
		return err
	}
	return nil
}

type CloseBotParam struct {
	UserStateId     uint32
	GlobalBaseBump  uint8
	GlobalQuoteBump uint8
}

func (obj CloseBotParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UserStateId` param:
	err = encoder.Encode(obj.UserStateId)
	if err != nil {
		return err
	}
	// Serialize `GlobalBaseBump` param:
	err = encoder.Encode(obj.GlobalBaseBump)
	if err != nil {
		return err
	}
	// Serialize `GlobalQuoteBump` param:
	err = encoder.Encode(obj.GlobalQuoteBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CloseBotParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UserStateId`:
	err = decoder.Decode(&obj.UserStateId)
	if err != nil {
		return err
	}
	// Deserialize `GlobalBaseBump`:
	err = decoder.Decode(&obj.GlobalBaseBump)
	if err != nil {
		return err
	}
	// Deserialize `GlobalQuoteBump`:
	err = decoder.Decode(&obj.GlobalQuoteBump)
	if err != nil {
		return err
	}
	return nil
}

type ClaimParam struct {
	UserStateId     uint32
	GlobalBaseBump  uint8
	GlobalQuoteBump uint8
}

func (obj ClaimParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UserStateId` param:
	err = encoder.Encode(obj.UserStateId)
	if err != nil {
		return err
	}
	// Serialize `GlobalBaseBump` param:
	err = encoder.Encode(obj.GlobalBaseBump)
	if err != nil {
		return err
	}
	// Serialize `GlobalQuoteBump` param:
	err = encoder.Encode(obj.GlobalQuoteBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UserStateId`:
	err = decoder.Decode(&obj.UserStateId)
	if err != nil {
		return err
	}
	// Deserialize `GlobalBaseBump`:
	err = decoder.Decode(&obj.GlobalBaseBump)
	if err != nil {
		return err
	}
	// Deserialize `GlobalQuoteBump`:
	err = decoder.Decode(&obj.GlobalQuoteBump)
	if err != nil {
		return err
	}
	return nil
}

type TakeOrdersParam struct {
	BaseMint              ag_solanago.PublicKey
	QuoteMint             ag_solanago.PublicKey
	MakerKey              ag_solanago.PublicKey
	MakerUserStateId      uint32
	MakerLevel            uint16
	MakerForwardOrReverse bool
	TokenSell             ag_solanago.PublicKey
	TokenBuy              ag_solanago.PublicKey
	AmountSell            uint64
	AmountBuy             uint64
	FillBuyOrSell         bool
	GlobalBaseBump        uint8
	GlobalQuoteBump       uint8
}

func (obj TakeOrdersParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `MakerKey` param:
	err = encoder.Encode(obj.MakerKey)
	if err != nil {
		return err
	}
	// Serialize `MakerUserStateId` param:
	err = encoder.Encode(obj.MakerUserStateId)
	if err != nil {
		return err
	}
	// Serialize `MakerLevel` param:
	err = encoder.Encode(obj.MakerLevel)
	if err != nil {
		return err
	}
	// Serialize `MakerForwardOrReverse` param:
	err = encoder.Encode(obj.MakerForwardOrReverse)
	if err != nil {
		return err
	}
	// Serialize `TokenSell` param:
	err = encoder.Encode(obj.TokenSell)
	if err != nil {
		return err
	}
	// Serialize `TokenBuy` param:
	err = encoder.Encode(obj.TokenBuy)
	if err != nil {
		return err
	}
	// Serialize `AmountSell` param:
	err = encoder.Encode(obj.AmountSell)
	if err != nil {
		return err
	}
	// Serialize `AmountBuy` param:
	err = encoder.Encode(obj.AmountBuy)
	if err != nil {
		return err
	}
	// Serialize `FillBuyOrSell` param:
	err = encoder.Encode(obj.FillBuyOrSell)
	if err != nil {
		return err
	}
	// Serialize `GlobalBaseBump` param:
	err = encoder.Encode(obj.GlobalBaseBump)
	if err != nil {
		return err
	}
	// Serialize `GlobalQuoteBump` param:
	err = encoder.Encode(obj.GlobalQuoteBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TakeOrdersParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `MakerKey`:
	err = decoder.Decode(&obj.MakerKey)
	if err != nil {
		return err
	}
	// Deserialize `MakerUserStateId`:
	err = decoder.Decode(&obj.MakerUserStateId)
	if err != nil {
		return err
	}
	// Deserialize `MakerLevel`:
	err = decoder.Decode(&obj.MakerLevel)
	if err != nil {
		return err
	}
	// Deserialize `MakerForwardOrReverse`:
	err = decoder.Decode(&obj.MakerForwardOrReverse)
	if err != nil {
		return err
	}
	// Deserialize `TokenSell`:
	err = decoder.Decode(&obj.TokenSell)
	if err != nil {
		return err
	}
	// Deserialize `TokenBuy`:
	err = decoder.Decode(&obj.TokenBuy)
	if err != nil {
		return err
	}
	// Deserialize `AmountSell`:
	err = decoder.Decode(&obj.AmountSell)
	if err != nil {
		return err
	}
	// Deserialize `AmountBuy`:
	err = decoder.Decode(&obj.AmountBuy)
	if err != nil {
		return err
	}
	// Deserialize `FillBuyOrSell`:
	err = decoder.Decode(&obj.FillBuyOrSell)
	if err != nil {
		return err
	}
	// Deserialize `GlobalBaseBump`:
	err = decoder.Decode(&obj.GlobalBaseBump)
	if err != nil {
		return err
	}
	// Deserialize `GlobalQuoteBump`:
	err = decoder.Decode(&obj.GlobalQuoteBump)
	if err != nil {
		return err
	}
	return nil
}

type CreateOrdersParam struct {
	MakerKey         ag_solanago.PublicKey
	MakerUserStateId uint32
	MakerLevel       uint16
}

func (obj CreateOrdersParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MakerKey` param:
	err = encoder.Encode(obj.MakerKey)
	if err != nil {
		return err
	}
	// Serialize `MakerUserStateId` param:
	err = encoder.Encode(obj.MakerUserStateId)
	if err != nil {
		return err
	}
	// Serialize `MakerLevel` param:
	err = encoder.Encode(obj.MakerLevel)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateOrdersParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MakerKey`:
	err = decoder.Decode(&obj.MakerKey)
	if err != nil {
		return err
	}
	// Deserialize `MakerUserStateId`:
	err = decoder.Decode(&obj.MakerUserStateId)
	if err != nil {
		return err
	}
	// Deserialize `MakerLevel`:
	err = decoder.Decode(&obj.MakerLevel)
	if err != nil {
		return err
	}
	return nil
}

type GridStatus ag_binary.BorshEnum

const (
	GridStatusRunning GridStatus = iota
	GridStatusPaused
	GridStatusShutdown
)

func (value GridStatus) String() string {
	switch value {
	case GridStatusRunning:
		return "Running"
	case GridStatusPaused:
		return "Paused"
	case GridStatusShutdown:
		return "Shutdown"
	default:
		return ""
	}
}
